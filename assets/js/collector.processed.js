function each(t,a,e){var n={};if(null!=t)if([].forEach&&t.forEach===[].forEach)t.forEach(a,e);else if(t.length===+t.length){for(var c=0,i=t.length;c<i;c++)if(c in t&&a.call(e,t[c],c,t)===n)return}else for(var r in t)if({}.hasOwnProperty.call(t,r)&&a.call(e,t[r],r,t)===n)return}function map(t,a,e){var n=[];return null==t?n:[].map&&t.map===[].map?t.map(a,e):(each(t,(function(t,c,i){n[n.length]=a.call(e,t,c,i)})),n)}var Graph=function(t){t.adjacencyList={},t.addVertex=function(t){this.adjacencyList[t]||(this.adjacencyList[t]=[])},t.addEdge=function(t,a){this.adjacencyList[t].push(a),this.adjacencyList[a].push(t)},t.removeVertex=function(t){for(;this.adjacencyList[t].length;){var a=this.adjacencyList[t].pop();this.removeEdge(t,a)}delete this.adjacencyList[t]},t.removeEdge=function(t,a){this.adjacencyList[t]=this.adjacencyList[t].filter((function(t){return t!==a})),this.adjacencyList[a]=this.adjacencyList[a].filter((function(a){return a!==t}))}}({});